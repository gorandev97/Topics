// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String?
  lastName      String?
  email         String         @unique
  password      String
  profileImage  String
  topics        Topic[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Topic {
  id          String    @id @default(uuid())
  title       String
  description String
  postedBy    String
  likesCount  Int       @default(0)
  author      User      @relation(fields: [postedBy], references: [id])
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  topicId    String
  postedBy   String
  likesCount Int      @default(0)
  topic      Topic    @relation(fields: [topicId], references: [id])
  author     User     @relation(fields: [postedBy], references: [id])
  likes      Like[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  topicId   String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id])
  topic     Topic?   @relation(fields: [topicId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
